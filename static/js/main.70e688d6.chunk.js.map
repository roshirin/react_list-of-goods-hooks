{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","handleReverse","sortType","changeSortType","goods","visibleGoods","sort","a","b","localeCompare","length","reverse","console","log","getReorderedGoods","resetButtonVisible","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAwCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAmCF,mBAAS,GAA5C,mBAAOG,EAAP,KAAiBC,EAAjB,KAOMC,EAtCD,SACLA,EADK,GAGJ,IADCF,EACF,EADEA,SAAUF,EACZ,EADYA,WAENK,EAAY,YAAOD,GAsBzB,OApBAC,EAAaC,MAAK,SAACC,EAAGC,GACpB,OAAQN,GACN,KAAK,EACH,OAAOK,EAAEE,cAAcD,GAEzB,KAAK,EACH,OAAOD,EAAEG,OAASF,EAAEE,OAEtB,QACE,OAAO,MAITV,GACFK,EAAaM,UAIfC,QAAQC,IAAIX,EAAUF,GAEfK,EAYOS,CAAkBjB,EAAiB,CAAEG,aAAYE,aACzDa,EAAqBf,GAA2B,IAAbE,EAEzC,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IAAW,iBAAkB,CAC3B,WAAyB,IAAbhB,IAGhBiB,QAAS,kBAAMhB,EAAe,IAPhC,iCAYA,wBACEc,KAAK,SACLD,UACEE,IAAW,oBAAqB,CAC9B,WAAyB,IAAbhB,IAGhBiB,QAAS,kBAAMhB,EAAe,IAPhC,4BAYA,wBACEc,KAAK,SACLD,UACEE,IAAW,oBAAqB,CAC9B,YAAalB,IAGjBmB,QAAS,kBAAMlB,GAAeD,IAPhC,qBAYCe,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAlDjBhB,EAAe,QACfF,GAAc,IA8CR,sBAUJ,6BACE,6BACGG,EAAMgB,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,cCxHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.70e688d6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((a, b) => {\n    switch (sortType) {\n      case 1:\n        return a.localeCompare(b);\n\n      case 2:\n        return a.length - b.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, handleReverse] = useState(false);\n  const [sortType, changeSortType] = useState(0);\n\n  const handleReset = () => {\n    changeSortType(0);\n    handleReverse(false);\n  };\n\n  const goods = getReorderedGoods(goodsFromServer, { isReversed, sortType });\n  const resetButtonVisible = isReversed || sortType !== 0;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            classNames('button is-info', {\n              'is-light': sortType !== 1,\n            })\n          }\n          onClick={() => changeSortType(1)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            classNames('button is-success', {\n              'is-light': sortType !== 2,\n            })\n          }\n          onClick={() => changeSortType(2)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            classNames('button is-warning', {\n              'is-light': !isReversed,\n            })\n          }\n          onClick={() => handleReverse(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {resetButtonVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => handleReset()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}